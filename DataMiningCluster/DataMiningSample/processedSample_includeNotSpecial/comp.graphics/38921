from
einkauf
austin
ibm
com
mark
einkauf
subject
re
need
help
z
buffering
lines
areas
together
david
gorgen
writes
i
m
asking
help
sticky
problem
involving
unreasonably
low
apparent
precision
z
buffering
i
ve
encountered
different
pex
implementations
i
can
find
any
discussion
problem
any
resources
i
can
lay
hands
e
g
comp
windows
x
pex
faq
gaskins
pexlib
programming
manual
vendors
documentation
problem
solved
eliminate
minimize
stitching
artifacts
resulting
from
use
z
buffering
polylines
coplanar
filled
areas
interpolated
z
values
along
line
differ
slightly
due
roundoff
error
from
interpolated
z
values
across
area
even
when
endpoints
line
coincident
vertices
area
because
tossup
whether
z
buffer
allow
line
pixels
area
pixels
displayed
visually
result
tends
dashed
line
effect
even
though
line
supposed
solid
using
pexlib
api
my
approach
solution
use
two
slightly
different
pex
view
mapping
transforms
two
view
table
entries
one
areas
one
lines
pex
structures
immediate
mode
output
must
organized
so
one
view
table
index
always
effect
areas
other
always
effect
lines
result
slight
shift
npc
z
coordinates
lines
so
attempt
bias
tossup
situations
favor
lines
shift
effected
moving
front
back
clipping
planes
used
pexlib
view
table
entry
lines
just
hair
backwards
i
e
smaller
vrc
z
coordinates
compared
positions
view
table
entry
used
areas
means
when
point
transformed
npc
its
z
value
slightly
bigger
comes
from
line
than
comes
from
area
thus
accomplishing
desired
bias
i
would
expect
z
roundoff
errors
which
cause
problem
amount
few
units
most
out
entire
dynamic
range
z
buffer
typically
from
i
e
bit
z
buffers
therefore
seems
tiny
fraction
range
z
vrc
between
front
back
clip
planes
ought
suffice
reliably
fix
stitching
fact
experience
shows
shift
has
much
range
empirically
worst
when
npc
z
component
slope
surface
high
i
e
when
appears
more
less
edge
viewer
only
bits
z
buffer
have
any
dependable
meaning
amount
so
great
one
problem
replaced
another
sometimes
polylines
show
through
areas
which
supposed
lie
behind
i
ve
observed
problem
both
hewlett
packard
digital
workstation
pex
servers
approximately
same
degree
test
program
demonstrates
problem
mit
pexlib
x
implementation
version
known
compile
run
hp
ux
system
pex
open
questions
why
does
happen
am
i
configuring
pex
view
table
wrongly
systematic
difference
z
interpolation
lines
opposed
areas
e
g
pixel
centers
versus
corners
which
could
corrected
pex
implementors
wantonly
discarding
z
precision
interpolators
something
else
what
do
about
can
i
fix
my
use
view
table
allow
better
precision
z
buffered
hlhsr
another
approach
i
can
take
remove
stitching
artifacts
am
i
just
out
luck
we
here
ibm
have
same
problem
our
workstations
i
also
shocked
when
i
first
realized
you
have
offset
lines
from
fills
about
bits
assuming
bit
z
buffer
seems
huge
only
dynamic
range
those
terms
doesn
seem
so
bad
what
happening
interpolation
z
totally
linear
due
mainly
roundoff
i
believe
so
polygon
planar
z
more
like
ruffles
potato
chip
ditto
lines
when
you
start
end
different
x
y
values
ridges
out
phase
resulting
stitch
effect
you
have
same
problem
you
try
draw
polygon
right
top
another
different
vertices
you
likely
see
smeared
effect
where
overlap
example
try
polygon
polygon
your
implementation
correct
fact
we
do
similar
trick
when
rendering
primitives
have
lines
polygons
nurbs
surfaces
isoparametric
lines
without
trick
lines
appear
stitched
you
say
when
application
draws
lines
polygons
independently
system
does
have
smarts
automatically
do
z
shifting
so
application
must
do
what
you
have
discovered
doing
bravo
note
ibm
ers
information
given
here
has
been
previously
disclosed
through
proper
channels
so
i
m
giving
away
any
new
unpublished
info
mark
einkauf
einkauf
austin
ibm
com
ibm
advanced
workstations
systems
graphics
systems
austin
tx
views
opinions
expressed
herein
necessarily
those
ibm
corp
